/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package clientapp;

import java.awt.Font;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import javax.swing.SwingConstants;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;

/**
 *
 * @author Minh Phong
 */
public class ClientApp extends javax.swing.JFrame {
    private final String username;
    public String hostname = "Phonyy";
    public int portnumber = 1234;
    /**
     * Creates new form ClientApp
     * @param username
     */
    public ClientApp(String username) {
        super();
        this.username = username;
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        plainText = new javax.swing.JTextField();
        secretKey = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        encryptAndSend = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageFromServer = new javax.swing.JTextArea();
        generateRandomKey = new javax.swing.JButton();
        keyLength = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        openFile = new javax.swing.JButton();
        sendTextFromFile = new javax.swing.JButton();
        userDisplay = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Plain Text");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, -1, -1));
        jPanel2.add(plainText, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 36, 150, -1));
        jPanel2.add(secretKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 36, 171, -1));

        jLabel2.setText("Key");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 13, 37, -1));

        encryptAndSend.setText("Encrypt & Send");
        encryptAndSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptAndSendActionPerformed(evt);
            }
        });
        jPanel2.add(encryptAndSend, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 65, -1, -1));

        messageFromServer.setColumns(20);
        messageFromServer.setRows(5);
        jScrollPane1.setViewportView(messageFromServer);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 155, 636, 180));

        generateRandomKey.setText("Generate");
        generateRandomKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRandomKeyActionPerformed(evt);
            }
        });
        jPanel2.add(generateRandomKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 65, 85, -1));

        keyLength.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "16", "24", "32" }));
        jPanel2.add(keyLength, new org.netbeans.lib.awtextra.AbsoluteConstraints(266, 66, -1, -1));

        jLabel3.setText("Bytes");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(312, 69, -1, -1));

        jLabel4.setText("Encrypted text and send");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 100, -1, -1));

        openFile.setText("Open");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        jPanel2.add(openFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 123, -1, -1));

        sendTextFromFile.setText("Send");
        sendTextFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendTextFromFileActionPerformed(evt);
            }
        });
        jPanel2.add(sendTextFromFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 123, -1, -1));

        userDisplay.setText("CLIENT");
        jPanel2.add(userDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(352, 13, 296, 80));
        userDisplay.setFont(new Font("Arial", Font.PLAIN, 40));
        userDisplay.setHorizontalAlignment(SwingConstants.CENTER);

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 660, 350));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img-2.png"))); // NOI18N
        jLabel5.setText("jLabel5");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 420));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encryptAndSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptAndSendActionPerformed
        // TODO add your handling code here:
        try {
            Socket clientSocket = new Socket(hostname, portnumber);
            
            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            PrintWriter out = new PrintWriter(new OutputStreamWriter(clientSocket.getOutputStream()), true);
            
            String text = plainText.getText();
            String key = secretKey.getText();
            String encryptedText = AES.encrypt(text, key);
            
            Date date = new Date();
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
            String formattedDateTime = formatter.format(date);
            
            if(key.getBytes().length == 16 || key.getBytes().length == 24 || key.getBytes().length == 32) {
                String clientMessage = formattedDateTime + " [" + this.username + "]: " + text + "\n";
                messageFromServer.append(clientMessage);
                out.println("excuteData");

                out.println(encryptedText);
                out.println(key);
                out.println(this.username);
                out.println(formattedDateTime);

                String line;
                StringBuilder response = new StringBuilder();

                while ((line = in.readLine()) != null) {
                    response.append(line);
                }

                String result = response.toString();

                messageFromServer.append(result + "\n");
            } else {
                messageFromServer.append("Key's length must be 16, 24, 32 bytes\n");
            }
            
            
        } catch(IOException ex) {
            messageFromServer.append("Unknow Error!: " + ex + "\n");
        }
    }//GEN-LAST:event_encryptAndSendActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        userDisplay.setText(username);
        
    }//GEN-LAST:event_formWindowOpened

    private void generateRandomKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRandomKeyActionPerformed
        // TODO add your handling code here:
        int len = Integer.parseInt((String) keyLength.getSelectedItem());
        secretKey.setText(KeyGenerator.generateRandomString(len));
    }//GEN-LAST:event_generateRandomKeyActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        // TODO add your handling code here:

        // Hiển thị hộp thoại để cho phép người dùng chọn tập tin
        int result = chooser.showOpenDialog(this);

        // Nếu người dùng chọn tập tin, hiển thị đường dẫn của tập tin trên giao diện người dùng
        if (result == JFileChooser.APPROVE_OPTION) {
            // Lấy đường dẫn của tập tin đã chọn
            String filePath = chooser.getSelectedFile().getAbsolutePath();
            messageFromServer.append("File path: " + filePath + "\n");
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void sendTextFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendTextFromFileActionPerformed
        // TODO add your handling code here:
        // Lấy đường dẫn của tập tin đã chọn
        String filePath = chooser.getSelectedFile().getAbsolutePath(); // Thay đổi đường dẫn tương ứng

        try {
            // Đọc nội dung của tập tin
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            StringBuilder builder = new StringBuilder();
            String line = reader.readLine();

            while (line != null) {
                builder.append(line);
                builder.append(System.lineSeparator());
                line = reader.readLine();
            }
            reader.close();

            // Mã hóa nội dung của tập tin
            String text = builder.toString();
            String key = secretKey.getText();
            String encryptedText = AES.encrypt(text, key);

            // Gửi nội dung đã mã hóa đến server
            Socket clientSocket = new Socket(hostname, portnumber);
            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            PrintWriter out = new PrintWriter(new OutputStreamWriter(clientSocket.getOutputStream()), true);

            if(key.getBytes().length == 16 || key.getBytes().length == 24 || key.getBytes().length == 32) {
                out.println("excuteFile");
                out.println(encryptedText);
                out.println(key);
                out.println(this.username);

                String lineres;
                StringBuilder response = new StringBuilder();
                while ((lineres = in.readLine()) != null) {
                    response.append(lineres);
                }

                String result = response.toString();
                messageFromServer.append(result + "\n");

                // Hiển thị thông báo khi gửi nội dung thành công
                messageFromServer.append("Send successfully\n");

            } else {
                messageFromServer.append("Key's length must be 16, 24, 32 bytes\n");
            }
            
            
        } catch (IOException e) {
            // Hiển thị thông báo lỗi nếu có lỗi xảy ra
            messageFromServer.append("Unknow Error!: " + e + "\n");
        }
    }//GEN-LAST:event_sendTextFromFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ClientApp().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser chooser;
    private javax.swing.JButton encryptAndSend;
    private javax.swing.JButton generateRandomKey;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> keyLength;
    private javax.swing.JTextArea messageFromServer;
    private javax.swing.JButton openFile;
    private javax.swing.JTextField plainText;
    private javax.swing.JTextField secretKey;
    private javax.swing.JButton sendTextFromFile;
    private javax.swing.JLabel userDisplay;
    // End of variables declaration//GEN-END:variables
}
